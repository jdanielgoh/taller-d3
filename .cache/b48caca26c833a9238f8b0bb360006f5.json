{"dependencies":[{"name":"d3-array","loc":{"line":1,"column":35}},{"name":"./array.js","loc":{"line":2,"column":20}},{"name":"./blur.js","loc":{"line":3,"column":27}},{"name":"./constant.js","loc":{"line":4,"column":21}},{"name":"./contours.js","loc":{"line":5,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var x = defaultX,\n      y = defaultY,\n      weight = defaultWeight,\n      dx = 960,\n      dy = 500,\n      r = 20,\n      // blur radius\n  k = 2,\n      // log2(grid cell size)\n  o = r * 3,\n      // grid offset, to pad for blur\n  n = dx + o * 2 >> k,\n      // grid width\n  m = dy + o * 2 >> k,\n      // grid height\n  threshold = (0, _constant2.default)(20);\n\n  function density(data) {\n    var values0 = new Float32Array(n * m),\n        values1 = new Float32Array(n * m);\n\n    data.forEach(function (d, i, data) {\n      var xi = +x(d, i, data) + o >> k,\n          yi = +y(d, i, data) + o >> k,\n          wi = +weight(d, i, data);\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += wi;\n      }\n    });\n\n    // TODO Optimize.\n    (0, _blur.blurX)({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k);\n    (0, _blur.blurY)({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k);\n    (0, _blur.blurX)({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k);\n    (0, _blur.blurY)({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k);\n    (0, _blur.blurX)({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k);\n    (0, _blur.blurY)({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k);\n\n    var tz = threshold(values0);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var stop = (0, _d3Array.max)(values0);\n      tz = (0, _d3Array.tickStep)(0, stop, tz);\n      tz = (0, _d3Array.range)(0, Math.floor(stop / tz) * tz, tz);\n      tz.shift();\n    }\n\n    return (0, _contours2.default)().thresholds(tz).size([n, m])(values0).map(transform);\n  }\n\n  function transform(geometry) {\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  }\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    coordinates.forEach(transformPoint);\n  }\n\n  // TODO Optimize.\n  function transformPoint(coordinates) {\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\n  }\n\n  function resize() {\n    o = r * 3;\n    n = dx + o * 2 >> k;\n    m = dy + o * 2 >> k;\n    return density;\n  }\n\n  density.x = function (_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, _constant2.default)(+_), density) : x;\n  };\n\n  density.y = function (_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, _constant2.default)(+_), density) : y;\n  };\n\n  density.weight = function (_) {\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : (0, _constant2.default)(+_), density) : weight;\n  };\n\n  density.size = function (_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0],\n        _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, resize();\n  };\n\n  density.cellSize = function (_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\n  };\n\n  density.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? (0, _constant2.default)(_array.slice.call(_)) : (0, _constant2.default)(_), density) : threshold;\n  };\n\n  density.bandwidth = function (_) {\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\n  };\n\n  return density;\n};\n\nvar _d3Array = require(\"d3-array\");\n\nvar _array = require(\"./array.js\");\n\nvar _blur = require(\"./blur.js\");\n\nvar _constant = require(\"./constant.js\");\n\nvar _constant2 = _interopRequireDefault(_constant);\n\nvar _contours = require(\"./contours.js\");\n\nvar _contours2 = _interopRequireDefault(_contours);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction defaultX(d) {\n  return d[0];\n}\n\nfunction defaultY(d) {\n  return d[1];\n}\n\nfunction defaultWeight() {\n  return 1;\n}"},"hash":"42bd8f35ad21cff7615f37903ee78cd2"}