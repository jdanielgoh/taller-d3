{"dependencies":[{"name":"./add.js","loc":{"line":1,"column":46}},{"name":"./cover.js","loc":{"line":2,"column":23}},{"name":"./data.js","loc":{"line":3,"column":22}},{"name":"./extent.js","loc":{"line":4,"column":24}},{"name":"./find.js","loc":{"line":5,"column":22}},{"name":"./remove.js","loc":{"line":6,"column":55}},{"name":"./root.js","loc":{"line":7,"column":22}},{"name":"./size.js","loc":{"line":8,"column":22}},{"name":"./visit.js","loc":{"line":9,"column":23}},{"name":"./visitAfter.js","loc":{"line":10,"column":28}},{"name":"./x.js","loc":{"line":11,"column":31}},{"name":"./y.js","loc":{"line":12,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = quadtree;\n\nvar _add = require(\"./add.js\");\n\nvar _add2 = _interopRequireDefault(_add);\n\nvar _cover = require(\"./cover.js\");\n\nvar _cover2 = _interopRequireDefault(_cover);\n\nvar _data = require(\"./data.js\");\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _extent = require(\"./extent.js\");\n\nvar _extent2 = _interopRequireDefault(_extent);\n\nvar _find = require(\"./find.js\");\n\nvar _find2 = _interopRequireDefault(_find);\n\nvar _remove = require(\"./remove.js\");\n\nvar _remove2 = _interopRequireDefault(_remove);\n\nvar _root = require(\"./root.js\");\n\nvar _root2 = _interopRequireDefault(_root);\n\nvar _size = require(\"./size.js\");\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _visit = require(\"./visit.js\");\n\nvar _visit2 = _interopRequireDefault(_visit);\n\nvar _visitAfter = require(\"./visitAfter.js\");\n\nvar _visitAfter2 = _interopRequireDefault(_visitAfter);\n\nvar _x = require(\"./x.js\");\n\nvar _x2 = _interopRequireDefault(_x);\n\nvar _y = require(\"./y.js\");\n\nvar _y2 = _interopRequireDefault(_y);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? _x.defaultX : x, y == null ? _y.defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = { data: leaf.data },\n      next = copy;\n  while (leaf = leaf.next) next = next.next = { data: leaf.data };\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function () {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{ source: node, target: copy._root = new Array(4) }];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({ source: child, target: node.target[i] = new Array(4) });else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = _add2.default;\ntreeProto.addAll = _add.addAll;\ntreeProto.cover = _cover2.default;\ntreeProto.data = _data2.default;\ntreeProto.extent = _extent2.default;\ntreeProto.find = _find2.default;\ntreeProto.remove = _remove2.default;\ntreeProto.removeAll = _remove.removeAll;\ntreeProto.root = _root2.default;\ntreeProto.size = _size2.default;\ntreeProto.visit = _visit2.default;\ntreeProto.visitAfter = _visitAfter2.default;\ntreeProto.x = _x2.default;\ntreeProto.y = _y2.default;"},"hash":"bd21336c5ce15337c9d06a0c6aad9c97"}