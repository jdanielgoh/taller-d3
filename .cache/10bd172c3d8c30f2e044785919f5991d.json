{"dependencies":[{"name":"../cartesian.js","loc":{"line":1,"column":102}},{"name":"../circle.js","loc":{"line":2,"column":27}},{"name":"../math.js","loc":{"line":3,"column":51}},{"name":"../pointEqual.js","loc":{"line":4,"column":23}},{"name":"./index.js","loc":{"line":5,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (radius) {\n  var cr = (0, _math.cos)(radius),\n      delta = 6 * _math.radians,\n      smallRadius = cr > 0,\n      notHemisphere = (0, _math.abs)(cr) > _math.epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    (0, _circle.circleStream)(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return (0, _math.cos)(lambda) * (0, _math.cos)(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n    c0, // code for previous point\n    v0, // visibility of previous point\n    v00, // visibility of first point\n    clean; // no intersections\n    return {\n      lineStart: function () {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function (lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? _math.pi : -_math.pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || (0, _pointEqual2.default)(point0, point2) || (0, _pointEqual2.default)(point1, point2)) point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !(0, _pointEqual2.default)(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function () {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function () {\n        return clean | (v00 && v0) << 1;\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = (0, _cartesian.cartesian)(a),\n        pb = (0, _cartesian.cartesian)(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 тип n2).\n    var n1 = [1, 0, 0],\n        // normal\n    n2 = (0, _cartesian.cartesianCross)(pa, pb),\n        n2n2 = (0, _cartesian.cartesianDot)(n2, n2),\n        n1n2 = n2[0],\n        // cartesianDot(n1, n2),\n    determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 = cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = (0, _cartesian.cartesianCross)(n1, n2),\n        A = (0, _cartesian.cartesianScale)(n1, c1),\n        B = (0, _cartesian.cartesianScale)(n2, c2);\n    (0, _cartesian.cartesianAddInPlace)(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = (0, _cartesian.cartesianDot)(A, u),\n        uu = (0, _cartesian.cartesianDot)(u, u),\n        t2 = w * w - uu * ((0, _cartesian.cartesianDot)(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = (0, _math.sqrt)(t2),\n        q = (0, _cartesian.cartesianScale)(u, (-w - t) / uu);\n    (0, _cartesian.cartesianAddInPlace)(q, A);\n    q = (0, _cartesian.spherical)(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = (0, _math.abs)(delta - _math.pi) < _math.epsilon,\n        meridian = polar || delta < _math.epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _math.abs)(q[0] - lambda0) < _math.epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > _math.pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = (0, _cartesian.cartesianScale)(u, (-w + t) / uu);\n      (0, _cartesian.cartesianAddInPlace)(q1, A);\n      return [q, (0, _cartesian.spherical)(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : _math.pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return (0, _index2.default)(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-_math.pi, radius - _math.pi]);\n};\n\nvar _cartesian = require(\"../cartesian.js\");\n\nvar _circle = require(\"../circle.js\");\n\nvar _math = require(\"../math.js\");\n\nvar _pointEqual = require(\"../pointEqual.js\");\n\nvar _pointEqual2 = _interopRequireDefault(_pointEqual);\n\nvar _index = require(\"./index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"},"hash":"4691a647ba9f72c3ee5db0f9b6789e4c"}