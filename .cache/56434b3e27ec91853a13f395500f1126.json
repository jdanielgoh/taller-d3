{"dependencies":[{"name":"./math.js","loc":{"line":1,"column":42}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.spherical = spherical;\nexports.cartesian = cartesian;\nexports.cartesianDot = cartesianDot;\nexports.cartesianCross = cartesianCross;\nexports.cartesianAddInPlace = cartesianAddInPlace;\nexports.cartesianScale = cartesianScale;\nexports.cartesianNormalizeInPlace = cartesianNormalizeInPlace;\n\nvar _math = require(\"./math.js\");\n\nfunction spherical(cartesian) {\n  return [(0, _math.atan2)(cartesian[1], cartesian[0]), (0, _math.asin)(cartesian[2])];\n}\n\nfunction cartesian(spherical) {\n  var lambda = spherical[0],\n      phi = spherical[1],\n      cosPhi = (0, _math.cos)(phi);\n  return [cosPhi * (0, _math.cos)(lambda), cosPhi * (0, _math.sin)(lambda), (0, _math.sin)(phi)];\n}\n\nfunction cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nfunction cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nfunction cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nfunction cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nfunction cartesianNormalizeInPlace(d) {\n  var l = (0, _math.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}"},"hash":"3a9d897b4eef214c516908e1d2ef8fd6"}