{"dependencies":[{"name":"d3-array","loc":{"line":1,"column":20}},{"name":"./math.js","loc":{"line":2,"column":55}},{"name":"./noop.js","loc":{"line":3,"column":17}},{"name":"./stream.js","loc":{"line":4,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areaStream = exports.areaRingSum = undefined;\n\nexports.default = function (object) {\n  areaSum = new _d3Array.Adder();\n  (0, _stream2.default)(object, areaStream);\n  return areaSum * 2;\n};\n\nvar _d3Array = require(\"d3-array\");\n\nvar _math = require(\"./math.js\");\n\nvar _noop = require(\"./noop.js\");\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _stream = require(\"./stream.js\");\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar areaRingSum = exports.areaRingSum = new _d3Array.Adder();\n\n// hello?\n\nvar areaSum = new _d3Array.Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nvar areaStream = exports.areaStream = {\n  point: _noop2.default,\n  lineStart: _noop2.default,\n  lineEnd: _noop2.default,\n  polygonStart: function () {\n    exports.areaRingSum = areaRingSum = new _d3Array.Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function () {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? _math.tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = _noop2.default;\n  },\n  sphere: function () {\n    areaSum.add(_math.tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= _math.radians, phi *= _math.radians;\n  lambda0 = lambda, cosPhi0 = (0, _math.cos)(phi = phi / 2 + _math.quarterPi), sinPhi0 = (0, _math.sin)(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  phi = phi / 2 + _math.quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoliâ€™s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = (0, _math.cos)(phi),\n      sinPhi = (0, _math.sin)(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * (0, _math.cos)(adLambda),\n      v = k * sdLambda * (0, _math.sin)(adLambda);\n  areaRingSum.add((0, _math.atan2)(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}"},"hash":"56f9ae4bce959139612b85546ab9d14f"}