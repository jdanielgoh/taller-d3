{"dependencies":[{"name":"./compose.js","loc":{"line":1,"column":20}},{"name":"./math.js","loc":{"line":2,"column":68}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rotateRadians = rotateRadians;\n\nexports.default = function (rotate) {\n  rotate = rotateRadians(rotate[0] * _math.radians, rotate[1] * _math.radians, rotate.length > 2 ? rotate[2] * _math.radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * _math.radians, coordinates[1] * _math.radians);\n    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;\n  }\n\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * _math.radians, coordinates[1] * _math.radians);\n    return coordinates[0] *= _math.degrees, coordinates[1] *= _math.degrees, coordinates;\n  };\n\n  return forward;\n};\n\nvar _compose = require(\"./compose.js\");\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _math = require(\"./math.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction rotationIdentity(lambda, phi) {\n  return [(0, _math.abs)(lambda) > _math.pi ? lambda + Math.round(-lambda / _math.tau) * _math.tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= _math.tau) ? deltaPhi || deltaGamma ? (0, _compose2.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > _math.pi ? lambda - _math.tau : lambda < -_math.pi ? lambda + _math.tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = (0, _math.cos)(deltaPhi),\n      sinDeltaPhi = (0, _math.sin)(deltaPhi),\n      cosDeltaGamma = (0, _math.cos)(deltaGamma),\n      sinDeltaGamma = (0, _math.sin)(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = (0, _math.cos)(phi),\n        x = (0, _math.cos)(lambda) * cosPhi,\n        y = (0, _math.sin)(lambda) * cosPhi,\n        z = (0, _math.sin)(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [(0, _math.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), (0, _math.asin)(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = (0, _math.cos)(phi),\n        x = (0, _math.cos)(lambda) * cosPhi,\n        y = (0, _math.sin)(lambda) * cosPhi,\n        z = (0, _math.sin)(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [(0, _math.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), (0, _math.asin)(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n\n  return rotation;\n}"},"hash":"ae5193fdc19892a605ef8309b5ee01ba"}