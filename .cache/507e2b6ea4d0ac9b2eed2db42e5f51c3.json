{"dependencies":[{"name":"d3-array","loc":{"line":1,"column":20}},{"name":"./math.js","loc":{"line":2,"column":50}},{"name":"./noop.js","loc":{"line":3,"column":17}},{"name":"./stream.js","loc":{"line":4,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (object) {\n  lengthSum = new _d3Array.Adder();\n  (0, _stream2.default)(object, lengthStream);\n  return +lengthSum;\n};\n\nvar _d3Array = require(\"d3-array\");\n\nvar _math = require(\"./math.js\");\n\nvar _noop = require(\"./noop.js\");\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _stream = require(\"./stream.js\");\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar lengthSum, lambda0, sinPhi0, cosPhi0;\n\nvar lengthStream = {\n  sphere: _noop2.default,\n  point: _noop2.default,\n  lineStart: lengthLineStart,\n  lineEnd: _noop2.default,\n  polygonStart: _noop2.default,\n  polygonEnd: _noop2.default\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = _noop2.default;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  lambda0 = lambda, sinPhi0 = (0, _math.sin)(phi), cosPhi0 = (0, _math.cos)(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= _math.radians, phi *= _math.radians;\n  var sinPhi = (0, _math.sin)(phi),\n      cosPhi = (0, _math.cos)(phi),\n      delta = (0, _math.abs)(lambda - lambda0),\n      cosDelta = (0, _math.cos)(delta),\n      sinDelta = (0, _math.sin)(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add((0, _math.atan2)((0, _math.sqrt)(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}"},"hash":"fc3c659bf548961a83c846bf65acc827"}