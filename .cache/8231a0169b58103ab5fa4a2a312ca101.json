{"dependencies":[{"name":"../math.js","loc":{"line":1,"column":60}},{"name":"./conic.js","loc":{"line":2,"column":30}},{"name":"./equirectangular.js","loc":{"line":3,"column":33}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.conicEquidistantRaw = conicEquidistantRaw;\n\nexports.default = function () {\n  return (0, _conic.conicProjection)(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);\n};\n\nvar _math = require(\"../math.js\");\n\nvar _conic = require(\"./conic.js\");\n\nvar _equirectangular = require(\"./equirectangular.js\");\n\nfunction conicEquidistantRaw(y0, y1) {\n  var cy0 = (0, _math.cos)(y0),\n      n = y0 === y1 ? (0, _math.sin)(y0) : (cy0 - (0, _math.cos)(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if ((0, _math.abs)(n) < _math.epsilon) return _equirectangular.equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y,\n        nx = n * x;\n    return [gy * (0, _math.sin)(nx), g - gy * (0, _math.cos)(nx)];\n  }\n\n  project.invert = function (x, y) {\n    var gy = g - y,\n        l = (0, _math.atan2)(x, (0, _math.abs)(gy)) * (0, _math.sign)(gy);\n    if (gy * n < 0) l -= _math.pi * (0, _math.sign)(x) * (0, _math.sign)(gy);\n    return [l / n, g - (0, _math.sign)(n) * (0, _math.sqrt)(x * x + gy * gy)];\n  };\n\n  return project;\n}"},"hash":"448e9e43ae5bee109ff5945915e0db79"}