{"dependencies":[{"name":"../math.js","loc":{"line":1,"column":66}},{"name":"./conic.js","loc":{"line":2,"column":30}},{"name":"./cylindricalEqualArea.js","loc":{"line":3,"column":38}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.conicEqualAreaRaw = conicEqualAreaRaw;\n\nexports.default = function () {\n  return (0, _conic.conicProjection)(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n};\n\nvar _math = require(\"../math.js\");\n\nvar _conic = require(\"./conic.js\");\n\nvar _cylindricalEqualArea = require(\"./cylindricalEqualArea.js\");\n\nfunction conicEqualAreaRaw(y0, y1) {\n  var sy0 = (0, _math.sin)(y0),\n      n = (sy0 + (0, _math.sin)(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if ((0, _math.abs)(n) < _math.epsilon) return (0, _cylindricalEqualArea.cylindricalEqualAreaRaw)(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0),\n      r0 = (0, _math.sqrt)(c) / n;\n\n  function project(x, y) {\n    var r = (0, _math.sqrt)(c - 2 * n * (0, _math.sin)(y)) / n;\n    return [r * (0, _math.sin)(x *= n), r0 - r * (0, _math.cos)(x)];\n  }\n\n  project.invert = function (x, y) {\n    var r0y = r0 - y,\n        l = (0, _math.atan2)(x, (0, _math.abs)(r0y)) * (0, _math.sign)(r0y);\n    if (r0y * n < 0) l -= _math.pi * (0, _math.sign)(x) * (0, _math.sign)(r0y);\n    return [l / n, (0, _math.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}"},"hash":"483d06593741aeaa46362500d571b442"}