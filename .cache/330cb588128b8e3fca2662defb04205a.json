{"dependencies":[{"name":"./index.js","loc":{"line":1,"column":17}},{"name":"../math.js","loc":{"line":2,"column":55}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require(\"./index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _math = require(\"../math.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _index2.default)(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-_math.pi, -_math.halfPi]);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\n\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function () {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function (lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? _math.pi : -_math.pi,\n          delta = (0, _math.abs)(lambda1 - lambda0);\n      if ((0, _math.abs)(delta - _math.pi) < _math.epsilon) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? _math.halfPi : -_math.halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= _math.pi) {\n        // line crosses antimeridian\n        if ((0, _math.abs)(lambda0 - sign0) < _math.epsilon) lambda0 -= sign0 * _math.epsilon; // handle degeneracies\n        if ((0, _math.abs)(lambda1 - sign1) < _math.epsilon) lambda1 -= sign1 * _math.epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function () {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function () {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = (0, _math.sin)(lambda0 - lambda1);\n  return (0, _math.abs)(sinLambda0Lambda1) > _math.epsilon ? (0, _math.atan)(((0, _math.sin)(phi0) * (cosPhi1 = (0, _math.cos)(phi1)) * (0, _math.sin)(lambda1) - (0, _math.sin)(phi1) * (cosPhi0 = (0, _math.cos)(phi0)) * (0, _math.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * _math.halfPi;\n    stream.point(-_math.pi, phi);\n    stream.point(0, phi);\n    stream.point(_math.pi, phi);\n    stream.point(_math.pi, 0);\n    stream.point(_math.pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-_math.pi, -phi);\n    stream.point(-_math.pi, 0);\n    stream.point(-_math.pi, phi);\n  } else if ((0, _math.abs)(from[0] - to[0]) > _math.epsilon) {\n    var lambda = from[0] < to[0] ? _math.pi : -_math.pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}"},"hash":"fbf4f72021db8cb9815388e8c9643598"}