{"dependencies":[{"name":"d3-dispatch","loc":{"line":1,"column":23}},{"name":"d3-selection","loc":{"line":2,"column":30}},{"name":"./nodrag.js","loc":{"line":3,"column":30}},{"name":"./noevent.js","loc":{"line":4,"column":37}},{"name":"./constant.js","loc":{"line":5,"column":21}},{"name":"./event.js","loc":{"line":6,"column":22}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var filter = defaultFilter,\n      container = defaultContainer,\n      subject = defaultSubject,\n      touchable = defaultTouchable,\n      gestures = {},\n      listeners = (0, _d3Dispatch.dispatch)(\"start\", \"drag\", \"end\"),\n      active = 0,\n      mousedownx,\n      mousedowny,\n      mousemoving,\n      touchending,\n      clickDistance2 = 0;\n\n  function drag(selection) {\n    selection.on(\"mousedown.drag\", mousedowned).filter(touchable).on(\"touchstart.drag\", touchstarted).on(\"touchmove.drag\", touchmoved).on(\"touchend.drag touchcancel.drag\", touchended).style(\"touch-action\", \"none\").style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  function mousedowned(event, d) {\n    if (touchending || !filter.call(this, event, d)) return;\n    var gesture = beforestart(this, container.call(this, event, d), event, d, \"mouse\");\n    if (!gesture) return;\n    (0, _d3Selection.select)(event.view).on(\"mousemove.drag\", mousemoved, true).on(\"mouseup.drag\", mouseupped, true);\n    (0, _nodrag2.default)(event.view);\n    (0, _noevent.nopropagation)(event);\n    mousemoving = false;\n    mousedownx = event.clientX;\n    mousedowny = event.clientY;\n    gesture(\"start\", event);\n  }\n\n  function mousemoved(event) {\n    (0, _noevent2.default)(event);\n    if (!mousemoving) {\n      var dx = event.clientX - mousedownx,\n          dy = event.clientY - mousedowny;\n      mousemoving = dx * dx + dy * dy > clickDistance2;\n    }\n    gestures.mouse(\"drag\", event);\n  }\n\n  function mouseupped(event) {\n    (0, _d3Selection.select)(event.view).on(\"mousemove.drag mouseup.drag\", null);\n    (0, _nodrag.yesdrag)(event.view, mousemoving);\n    (0, _noevent2.default)(event);\n    gestures.mouse(\"end\", event);\n  }\n\n  function touchstarted(event, d) {\n    if (!filter.call(this, event, d)) return;\n    var touches = event.changedTouches,\n        c = container.call(this, event, d),\n        n = touches.length,\n        i,\n        gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {\n        (0, _noevent.nopropagation)(event);\n        gesture(\"start\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchmoved(event) {\n    var touches = event.changedTouches,\n        n = touches.length,\n        i,\n        gesture;\n\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        (0, _noevent2.default)(event);\n        gesture(\"drag\", event, touches[i]);\n      }\n    }\n  }\n\n  function touchended(event) {\n    var touches = event.changedTouches,\n        n = touches.length,\n        i,\n        gesture;\n\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function () {\n      touchending = null;\n    }, 500); // Ghost clicks are delayed!\n    for (i = 0; i < n; ++i) {\n      if (gesture = gestures[touches[i].identifier]) {\n        (0, _noevent.nopropagation)(event);\n        gesture(\"end\", event, touches[i]);\n      }\n    }\n  }\n\n  function beforestart(that, container, event, d, identifier, touch) {\n    var dispatch = listeners.copy(),\n        p = (0, _d3Selection.pointer)(touch || event, container),\n        dx,\n        dy,\n        s;\n\n    if ((s = subject.call(that, new _event2.default(\"beforestart\", {\n      sourceEvent: event,\n      target: drag,\n      identifier,\n      active,\n      x: p[0],\n      y: p[1],\n      dx: 0,\n      dy: 0,\n      dispatch\n    }), d)) == null) return;\n\n    dx = s.x - p[0] || 0;\n    dy = s.y - p[1] || 0;\n\n    return function gesture(type, event, touch) {\n      var p0 = p,\n          n;\n      switch (type) {\n        case \"start\":\n          gestures[identifier] = gesture, n = active++;break;\n        case \"end\":\n          delete gestures[identifier], --active; // nobreak\n        case \"drag\":\n          p = (0, _d3Selection.pointer)(touch || event, container), n = active;break;\n      }\n      dispatch.call(type, that, new _event2.default(type, {\n        sourceEvent: event,\n        subject: s,\n        target: drag,\n        identifier,\n        active: n,\n        x: p[0] + dx,\n        y: p[1] + dy,\n        dx: p[0] - p0[0],\n        dy: p[1] - p0[1],\n        dispatch\n      }), d);\n    };\n  }\n\n  drag.filter = function (_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : (0, _constant2.default)(!!_), drag) : filter;\n  };\n\n  drag.container = function (_) {\n    return arguments.length ? (container = typeof _ === \"function\" ? _ : (0, _constant2.default)(_), drag) : container;\n  };\n\n  drag.subject = function (_) {\n    return arguments.length ? (subject = typeof _ === \"function\" ? _ : (0, _constant2.default)(_), drag) : subject;\n  };\n\n  drag.touchable = function (_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : (0, _constant2.default)(!!_), drag) : touchable;\n  };\n\n  drag.on = function () {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? drag : value;\n  };\n\n  drag.clickDistance = function (_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);\n  };\n\n  return drag;\n};\n\nvar _d3Dispatch = require(\"d3-dispatch\");\n\nvar _d3Selection = require(\"d3-selection\");\n\nvar _nodrag = require(\"./nodrag.js\");\n\nvar _nodrag2 = _interopRequireDefault(_nodrag);\n\nvar _noevent = require(\"./noevent.js\");\n\nvar _noevent2 = _interopRequireDefault(_noevent);\n\nvar _constant = require(\"./constant.js\");\n\nvar _constant2 = _interopRequireDefault(_constant);\n\nvar _event = require(\"./event.js\");\n\nvar _event2 = _interopRequireDefault(_event);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultContainer() {\n  return this.parentNode;\n}\n\nfunction defaultSubject(event, d) {\n  return d == null ? { x: event.x, y: event.y } : d;\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || \"ontouchstart\" in this;\n}"},"hash":"75572b3eeb4f641cd7d3f716151a161e"}