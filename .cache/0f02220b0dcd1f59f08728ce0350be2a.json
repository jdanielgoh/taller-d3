{"dependencies":[{"name":"d3-array","loc":{"line":1,"column":42}},{"name":"./continuous.js","loc":{"line":2,"column":23}},{"name":"./init.js","loc":{"line":3,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sequentialQuantile;\n\nvar _d3Array = require(\"d3-array\");\n\nvar _continuous = require(\"./continuous.js\");\n\nvar _init = require(\"./init.js\");\n\nfunction sequentialQuantile() {\n  var domain = [],\n      interpolator = _continuous.identity;\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator(((0, _d3Array.bisect)(domain, x, 1) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(_d3Array.ascending);\n    return scale;\n  };\n\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.range = function () {\n    return domain.map((d, i) => interpolator(i / (domain.length - 1)));\n  };\n\n  scale.quantiles = function (n) {\n    return Array.from({ length: n + 1 }, (_, i) => (0, _d3Array.quantile)(domain, i / n));\n  };\n\n  scale.copy = function () {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return _init.initInterpolator.apply(scale, arguments);\n}"},"hash":"3a155f35d800c27d301056bbb090afc2"}