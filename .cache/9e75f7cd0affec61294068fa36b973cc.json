{"dependencies":[{"name":"../clip/rectangle.js","loc":{"line":1,"column":26}},{"name":"../identity.js","loc":{"line":2,"column":21}},{"name":"../transform.js","loc":{"line":3,"column":26}},{"name":"./fit.js","loc":{"line":4,"column":54}},{"name":"../math.js","loc":{"line":5,"column":41}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var k = 1,\n      tx = 0,\n      ty = 0,\n      sx = 1,\n      sy = 1,\n      // scale, translate and reflect\n  alpha = 0,\n      ca,\n      sa,\n      // angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      // clip extent\n  kx = 1,\n      ky = 1,\n      transform = (0, _transform.transformer)({\n    point: function (x, y) {\n      var p = projection([x, y]);\n      this.stream.point(p[0], p[1]);\n    }\n  }),\n      postclip = _identity2.default,\n      cache,\n      cacheStream;\n\n  function reset() {\n    kx = k * sx;\n    ky = k * sy;\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  function projection(p) {\n    var x = p[0] * kx,\n        y = p[1] * ky;\n    if (alpha) {\n      var t = y * ca - x * sa;\n      x = x * ca + y * sa;\n      y = t;\n    }\n    return [x + tx, y + ty];\n  }\n  projection.invert = function (p) {\n    var x = p[0] - tx,\n        y = p[1] - ty;\n    if (alpha) {\n      var t = y * ca + x * sa;\n      x = x * ca - y * sa;\n      y = t;\n    }\n    return [x / kx, y / ky];\n  };\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n  };\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identity2.default) : (0, _rectangle2.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, reset()) : k;\n  };\n  projection.translate = function (_) {\n    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];\n  };\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * _math.radians, sa = (0, _math.sin)(alpha), ca = (0, _math.cos)(alpha), reset()) : alpha * _math.degrees;\n  };\n  projection.reflectX = function (_) {\n    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;\n  };\n  projection.reflectY = function (_) {\n    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;\n  };\n  projection.fitExtent = function (extent, object) {\n    return (0, _fit.fitExtent)(projection, extent, object);\n  };\n  projection.fitSize = function (size, object) {\n    return (0, _fit.fitSize)(projection, size, object);\n  };\n  projection.fitWidth = function (width, object) {\n    return (0, _fit.fitWidth)(projection, width, object);\n  };\n  projection.fitHeight = function (height, object) {\n    return (0, _fit.fitHeight)(projection, height, object);\n  };\n\n  return projection;\n};\n\nvar _rectangle = require(\"../clip/rectangle.js\");\n\nvar _rectangle2 = _interopRequireDefault(_rectangle);\n\nvar _identity = require(\"../identity.js\");\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nvar _transform = require(\"../transform.js\");\n\nvar _fit = require(\"./fit.js\");\n\nvar _math = require(\"../math.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"},"hash":"3a0bd3a5a5c47abeeff0225a4d3ec460"}