{"dependencies":[{"name":"d3-quadtree","loc":{"line":1,"column":23}},{"name":"./constant.js","loc":{"line":2,"column":21}},{"name":"./jiggle.js","loc":{"line":3,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = (0, _constant2.default)(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = (0, _d3Quadtree.quadtree)(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = (0, _jiggle2.default)(random), l += x * x;\n            if (y === 0) y = (0, _jiggle2.default)(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, _constant2.default)(+_), initialize(), force) : radius;\n  };\n\n  return force;\n};\n\nvar _d3Quadtree = require(\"d3-quadtree\");\n\nvar _constant = require(\"./constant.js\");\n\nvar _constant2 = _interopRequireDefault(_constant);\n\nvar _jiggle = require(\"./jiggle.js\");\n\nvar _jiggle2 = _interopRequireDefault(_jiggle);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}"},"hash":"e4eb597920eecff284d00ad07ed699cd"}